{"version":3,"file":"pfe-icon.min.js","sources":["../_temp/icon-set.js","../_temp/pfe-icon.js","../_temp/builtin-icon-sets.js"],"sourcesContent":["class PfeIconSet {\n  /**\n   * Run the icon set's name resolver to turn an icon name into an icon path, id, etc.\n   */\n  resolveIconName(iconName) {\n    return this._resolveIconName(iconName, this.name, this.path);\n  }\n\n  /**\n   * Create a new icon set.  Icon sets have a name (ie, a namespace).  For\n   * example, an icon with a name of \"rh-logo\" represents a \"logo\" icon from the\n   * \"rh\" set.  Icon set names are always separated from the rest of the icon\n   * name with a hyphen `-`.  This means that set names cannot contain a hyphen.\n   *\n   * @param {String} name the namespace of the icon set\n   * @param {String} path the web-accessible path to the icon set (for instance, a CDN)\n   * @param {Function} resolveIconName an optional function to combine the path and an icon name into a final path.  The function will be passed the namespaced icon name (for example, \"rh-api\" where rh is the namespace and api is the individual icon's name)\n   * @returns {Object} an object with the status of the icon set installation, such as `{ result: true, text: 'icon set installed' }` or `{ result: false, text: 'icon set is already installed' }`\n   */\n  constructor(name, path, resolveIconName) {\n    this.name = name;\n    this.path = path;\n    this._resolveIconName = resolveIconName;\n  }\n}\n\nexport default PfeIconSet;\n","/*!\n * PatternFly Elements: PfeIcon 1.0.0-prerelease.55\n * @license\n * Copyright 2020 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport PFElement from \"../../pfelement/dist/pfelement.js\";\nimport PfeIconSet from \"./icon-set.js\";\nimport { addBuiltIns } from \"./builtin-icon-sets.js\";\n\n/**\n * Sets the id attribute on the <filter> element and points the CSS `filter` at that id.\n */\nfunction _setRandomFilterId(el) {\n  const randomId =\n    \"filter-\" +\n    Math.random()\n      .toString()\n      .slice(2, 10);\n\n  // set the CSS filter property to point at the given id\n  el.shadowRoot.querySelector(\"svg image\").style.filter = `url(#${randomId})`;\n\n  // set the id attribute on the SVG filter element to match\n  el.shadowRoot.querySelector(\"svg filter\").setAttribute(\"id\", randomId);\n}\n\nclass PfeIcon extends PFElement {\n  static get version() {\n    return \"1.0.0-prerelease.55\";\n  }\n\n  get html() {\n    return `<style>@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){:host{color:#151515!important}}:host([on=dark]){--pfe-broadcasted--text:var(--pfe-theme--color--text--on-dark, #fff);--pfe-broadcasted--link:var(--pfe-theme--color--link--on-dark, #73bcf7);--pfe-broadcasted--link--hover:var(--pfe-theme--color--link--hover--on-dark, #bee1f4);--pfe-broadcasted--link--focus:var(--pfe-theme--color--link--focus--on-dark, #bee1f4);--pfe-broadcasted--link--visited:var(--pfe-theme--color--link--visited--on-dark, #bee1f4);--pfe-broadcasted--link-decoration:var(--pfe-theme--link-decoration--on-dark, none);--pfe-broadcasted--link-decoration--hover:var(--pfe-theme--link-decoration--hover--on-dark, underline);--pfe-broadcasted--link-decoration--focus:var(--pfe-theme--link-decoration--focus--on-dark, underline);--pfe-broadcasted--link-decoration--visited:var(--pfe-theme--link-decoration--visited--on-dark, none)}:host([on=saturated]){--pfe-broadcasted--text:var(--pfe-theme--color--text--on-saturated, #fff);--pfe-broadcasted--link:var(--pfe-theme--color--link--on-saturated, #fff);--pfe-broadcasted--link--hover:var(--pfe-theme--color--link--hover--on-saturated, #fafafa);--pfe-broadcasted--link--focus:var(--pfe-theme--color--link--focus--on-saturated, #fafafa);--pfe-broadcasted--link--visited:var(--pfe-theme--color--link--visited--on-saturated, #8476d1);--pfe-broadcasted--link-decoration:var(--pfe-theme--link-decoration--on-saturated, underline);--pfe-broadcasted--link-decoration--hover:var(--pfe-theme--link-decoration--hover--on-saturated, underline);--pfe-broadcasted--link-decoration--focus:var(--pfe-theme--link-decoration--focus--on-saturated, underline);--pfe-broadcasted--link-decoration--visited:var(--pfe-theme--link-decoration--visited--on-saturated, underline)}:host([on=light]){--pfe-broadcasted--text:var(--pfe-theme--color--text, #151515);--pfe-broadcasted--link:var(--pfe-theme--color--link, #06c);--pfe-broadcasted--link--hover:var(--pfe-theme--color--link--hover, #004080);--pfe-broadcasted--link--focus:var(--pfe-theme--color--link--focus, #004080);--pfe-broadcasted--link--visited:var(--pfe-theme--color--link--visited, #6753ac);--pfe-broadcasted--link-decoration:var(--pfe-theme--link-decoration, none);--pfe-broadcasted--link-decoration--hover:var(--pfe-theme--link-decoration--hover, underline);--pfe-broadcasted--link-decoration--focus:var(--pfe-theme--link-decoration--focus, underline);--pfe-broadcasted--link-decoration--visited:var(--pfe-theme--link-decoration--visited, none)}:host{--theme:var(--pfe-icon--theme, light);position:relative;display:inline-block;max-width:calc(1em + 0 * 2);max-width:calc(var(--pfe-icon--size,var(--pfe-theme--icon-size,1em)) + var(--pfe-icon--Padding,0) * 2);width:-webkit-fit-content!important;width:-moz-fit-content!important;width:fit-content!important;max-height:calc(1em + 0 * 2);max-height:calc(var(--pfe-icon--size,var(--pfe-theme--icon-size,1em)) + var(--pfe-icon--Padding,0) * 2);height:-webkit-fit-content!important;height:-moz-fit-content!important;height:fit-content!important;line-height:0}:host([data-block]){display:block;margin-bottom:16px;margin-bottom:var(--pfe-icon--spacing,var(--pfe-theme--container-spacer,16px));margin-top:16px;margin-top:var(--pfe-icon--spacing,var(--pfe-theme--container-spacer,16px))}:host([data-block]):first-child{margin-top:0}:host svg{width:1em;width:var(--pfe-icon--size,var(--pfe-theme--icon-size,1em));height:1em;height:var(--pfe-icon--size,var(--pfe-theme--icon-size,1em))}:host(:not(.load-failed)){vertical-align:middle;border-radius:50%;background-color:transparent;background-color:var(--pfe-icon--BackgroundColor,transparent);border:0 solid transparent;border:var(--pfe-icon--BorderWidth,0) var(--pfe-theme--ui--border-style,solid) var(--pfe-icon--BorderColor,var(--pfe-icon--color,transparent));padding:0;padding:var(--pfe-icon--Padding,0)}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){:host(:not(.load-failed)){background-color:#fff!important}:host(:not(.load-failed)) svg filter feFlood{flood-color:#000!important}}@supports (-ms-accelerator:true){:host(:not(.load-failed)){background-color:#fff!important}:host(:not(.load-failed)) svg filter feFlood{flood-color:#000!important}}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){:host(:not(.load-failed)) svg image{-webkit-filter:none;filter:none}}:host(:not(.load-failed)) filter feFlood{flood-color:#3c3f42;flood-color:var(--pfe-icon--Color,var(--pfe-icon--color,var(--pfe-broadcasted--text,#3c3f42)))}:host(:not(.load-failed)) .pfe-icon--fallback{display:none}:host([pfe-size=\"2x\"]){--pfe-icon--size:2em}:host([pfe-size=\"3x\"]){--pfe-icon--size:3em}:host([pfe-size=\"4x\"]){--pfe-icon--size:4em}:host([pfe-size=xl]){--pfe-icon--size:100px}:host([pfe-size=lg]){--pfe-icon--size:64px}:host([pfe-size=md]){--pfe-icon--size:32px}:host([pfe-size=sm]){--pfe-icon--size:14px}:host([pfe-color=critical]){--pfe-icon--color:var(--pfe-theme--color--feedback--critical, #a30000);--pfe-icon--theme:dark}:host([pfe-color=important]){--pfe-icon--color:var(--pfe-theme--color--feedback--important, #d73401);--pfe-icon--theme:dark}:host([pfe-color=moderate]){--pfe-icon--color:var(--pfe-theme--color--feedback--moderate, #ffc024)}:host([pfe-color=success]){--pfe-icon--color:var(--pfe-theme--color--feedback--success, #2e7d32);--pfe-icon--theme:dark}:host([pfe-color=info]){--pfe-icon--color:var(--pfe-theme--color--feedback--info, #0277bd);--pfe-icon--theme:dark}:host([pfe-color=default]){--pfe-icon--color:var(--pfe-theme--color--feedback--default, #4f5255);--pfe-icon--theme:dark}:host([pfe-color=lightest]){--pfe-icon--color:var(--pfe-theme--color--surface--lightest, #fff);--pfe-icon--theme:light}:host([pfe-color=base]){--pfe-icon--color:var(--pfe-theme--color--surface--base, #f0f0f0);--pfe-icon--theme:light}:host([pfe-color=darker]){--pfe-icon--color:var(--pfe-theme--color--surface--darker, #3c3f42);--pfe-icon--theme:dark}:host([pfe-color=darkest]){--pfe-icon--color:var(--pfe-theme--color--surface--darkest, #151515);--pfe-icon--theme:dark}:host([pfe-color=complement]){--pfe-icon--color:var(--pfe-theme--color--surface--complement, #002952);--pfe-icon--theme:saturated}:host([pfe-color=accent]){--pfe-icon--color:var(--pfe-theme--color--surface--accent, #004080);--pfe-icon--theme:saturated}:host([pfe-circled]:not([pfe-circled=false])){--pfe-icon--BackgroundColor:var(--pfe-icon--color, var(--pfe-theme--color--surface--lightest, #fff));--pfe-icon--Color:var(--pfe-broadcasted--text, #3c3f42);--pfe-icon--Padding:0.5em;--pfe-icon--BorderWidth:var(--pfe-theme--ui--border-width, 1px);--pfe-icon--BorderColor:var(--pfe-icon--color, var(--pfe-theme--color--surface--border, #d2d2d2))}:host(.load-failed) svg image{display:none}:host(.load-failed.has-fallback) svg,:host(.load-failed[on-fail=collapse]) svg{display:none}:host(.load-failed[on-fail=collapse]){--pfe-icon--size:0}\n/*# sourceMappingURL=pfe-icon.min.css.map */\n</style><div class=\"pfe-icon--fallback\">\n  <slot></slot>\n</div>\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n  <filter color-interpolation-filters=\"sRGB\" x=\"0\" y=\"0\" height=\"100%\" width=\"100%\">\n    <feFlood result=\"COLOR\" />\n    <feComposite operator=\"in\" in=\"COLOR\" in2=\"SourceAlpha\" />\n  </filter>\n  <image xlink:href=\"\" width=\"100%\" height=\"100%\"></image>\n</svg>`;\n  }\n\n  static get properties() {\n    return {\"icon\":{\"title\":\"Icon\",\"type\":\"string\",\"prefixed\":false},\"size\":{\"title\":\"Size\",\"type\":\"string\",\"enum\":[\"xl\",\"lg\",\"md\",\"sm\",\"2x\",\"3x\",\"4x\"],\"prefixed\":true},\"color\":{\"title\":\"Color\",\"type\":\"string\",\"enum\":[\"complement\",\"accent\",\"lightest\",\"base\",\"darker\",\"darkest\",\"critical\",\"important\",\"moderate\",\"success\",\"info\"],\"prefixed\":true},\"circled\":{\"title\":\"Circled\",\"type\":\"boolean\",\"default\":false,\"prefixed\":true}};\n  }\n\n  static get slots() {\n    return {};\n  }\n  static get tag() {\n    return \"pfe-icon\";\n  }\n\n  get templateUrl() {\n    return \"pfe-icon.html\";\n  }\n\n  get styleUrl() {\n    return \"pfe-icon.scss\";\n  }\n\n  get schemaUrl() {\n    return \"pfe-icon.json\";\n  }\n\n  // Declare the type of this component\n  static get PfeType() {\n    return PFElement.PfeTypes.Content;\n  }\n\n  static get EVENTS() {\n    return {\n      ADD_ICON_SET: `${this.tag}:add-icon-set`\n    };\n  }\n\n  get upgraded() {\n    return this.image.hasAttribute(\"xlink:href\");\n  }\n\n  get has_fallback() {\n    return this.children.length > 0 || this.innerText.length > 0;\n  }\n\n  static get observedAttributes() {\n    return [\"icon\", \"on-fail\", \"pfe-circled\", \"pfe-color\"];\n  }\n\n  _iconLoad() {\n    this.classList.remove(\"load-failed\");\n  }\n\n  _iconLoadError() {\n    this.classList.add(\"load-failed\");\n    if (this.has_fallback) {\n      this.classList.add(\"has-fallback\");\n    }\n  }\n\n  constructor() {\n    super(PfeIcon, { type: PfeIcon.PfeType });\n\n    this._iconLoad = this._iconLoad.bind(this);\n    this._iconLoadError = this._iconLoadError.bind(this);\n\n    this.image = this.shadowRoot.querySelector(\"svg image\");\n    if (this.image) {\n      this.image.addEventListener(\"load\", this._iconLoad);\n      this.image.addEventListener(\"error\", this._iconLoadError);\n    }\n\n    // Attach a listener for the registration of an icon set\n    // Leaving this attached allows for the registered set to be updated\n    document.body.addEventListener(PfeIcon.EVENTS.ADD_ICON_SET, () =>\n      this.updateIcon()\n    );\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    if (this.image) {\n      this.image.removeEventListener(\"load\", this._iconLoad);\n      this.image.removeEventListener(\"error\", this._iconLoadError);\n    }\n  }\n\n  attributeChangedCallback(attr, oldValue, newValue) {\n    super.attributeChangedCallback(...arguments);\n    this.updateIcon(newValue);\n    this.context_update();\n  }\n\n  updateIcon(iconName = this.getAttribute(\"icon\")) {\n    const { set } = PfeIcon.getIconSet(iconName);\n    if (set) {\n      const iconPath = set.resolveIconName(iconName);\n      this.image.setAttribute(\"xlink:href\", iconPath);\n      _setRandomFilterId(this);\n    }\n  }\n\n  /**\n   * Get an icon set by providing the set's name, _or_ the name of an icon from that set.\n   *\n   * @param {String} iconName the name of the set, or the name of an icon from that set.\n   * @return {PfeIconSet} the icon set\n   */\n  static getIconSet(iconName) {\n    let set;\n    if (iconName) {\n      const [setName] = iconName.split(\"-\");\n      set = this._iconSets[setName];\n    }\n    return { set };\n  }\n\n  static addIconSet(name, path, resolveIconName) {\n    let resolveFunction;\n\n    if (typeof resolveIconName === \"function\") {\n      resolveFunction = resolveIconName;\n    } else if (\n      typeof resolveIconName === \"undefined\" &&\n      this._iconSets[name] &&\n      typeof this._iconSets[name]._resolveIconName === \"function\"\n    ) {\n      resolveFunction = this._iconSets[name]._resolveIconName;\n    } else if (\n      typeof resolveIconName !== \"function\" &&\n      typeof resolveIconName !== \"undefined\"\n    ) {\n      console.warn(\n        `${this.tag}: The third input to addIconSet should be a function that parses and returns the icon's filename.`\n      );\n    } else {\n      console.warn(\n        `${this.tag}: The set ${name} needs a resolve function for the icon names.`\n      );\n    }\n\n    // Register the icon set and set up the event indicating the change\n    this._iconSets[name] = new PfeIconSet(name, path, resolveFunction);\n\n    document.body.dispatchEvent(\n      new CustomEvent(this.EVENTS.ADD_ICON_SET, {\n        bubbles: false,\n        detail: {\n          set: this._iconSets[name]\n        }\n      })\n    );\n  }\n}\n\nPfeIcon._iconSets = {};\n\naddBuiltIns(PfeIcon);\n\nPFElement.create(PfeIcon);\n\nexport default PfeIcon;\n","/**\n * An 'init' function to add the PFE built-in icon sets to the current page.\n */\nexport function addBuiltIns(PfeIcon) {\n  [\n    {\n      name: \"web\",\n      path: \"https://access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs\"\n    },\n    {\n      name: \"rh\",\n      path: \"https://access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs\"\n    }\n  ].forEach(set =>\n    PfeIcon.addIconSet(set.name, set.path, (name, iconSetName, iconSetPath) => {\n      const regex = new RegExp(`^${iconSetName}(-icon)?-(.*)`);\n      const [, , iconName] = regex.exec(name);\n\n      const iconId = `${iconSetName}-icon-${iconName}`;\n      const iconPath = `${iconSetPath}/${iconId}.svg`;\n\n      return iconPath;\n    })\n  );\n}\n"],"names":["PfeIconSet","[object Object]","iconName","this","_resolveIconName","name","path","resolveIconName","PfeIcon","PFElement","version","html","properties","icon","title","type","prefixed","size","enum","color","circled","default","slots","tag","templateUrl","styleUrl","schemaUrl","PfeType","PfeTypes","Content","EVENTS","ADD_ICON_SET","upgraded","image","hasAttribute","has_fallback","children","length","innerText","observedAttributes","classList","remove","add","super","_iconLoad","bind","_iconLoadError","shadowRoot","querySelector","addEventListener","document","body","updateIcon","disconnectedCallback","removeEventListener","attr","oldValue","newValue","attributeChangedCallback","arguments","context_update","getAttribute","set","getIconSet","iconPath","setAttribute","el","randomId","Math","random","toString","slice","style","filter","_setRandomFilterId","setName","split","_iconSets","resolveFunction","console","warn","dispatchEvent","CustomEvent","bubbles","detail","forEach","addIconSet","iconSetName","iconSetPath","regex","RegExp","exec","addBuiltIns","create"],"mappings":"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"}
{"version":3,"file":"pfelement.min.js","sources":["../_temp/reveal.js","../_temp/pfelement.js"],"sourcesContent":["let logger = () => null;\n\nexport function reveal() {\n  logger(`[reveal] elements ready, revealing the body`);\n  window.document.body.removeAttribute(\"unresolved\");\n}\n\nexport function autoReveal(logFunction) {\n  logger = logFunction;\n  // If Web Components are already ready, run the handler right away.  If they\n  // are not yet ready, wait.\n  //\n  // see https://github.com/github/webcomponentsjs#webcomponents-loaderjs for\n  // info about web component readiness events\n  const polyfillPresent = window.WebComponents;\n  const polyfillReady = polyfillPresent && window.WebComponents.ready;\n\n  if (!polyfillPresent || polyfillReady) {\n    handleWebComponentsReady();\n  } else {\n    window.addEventListener(\"WebComponentsReady\", handleWebComponentsReady);\n  }\n}\n\nfunction handleWebComponentsReady() {\n  logger(\"[reveal] web components ready\");\n  reveal();\n}\n","/*!\n * PatternFly Elements: PFElement 1.0.0-prerelease.45\n * @license\n * Copyright 2020 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport { autoReveal } from \"./reveal.js\";\nconst prefix = \"pfe-\";\n\nclass PFElement extends HTMLElement {\n  static create(pfe) {\n    window.customElements.define(pfe.tag, pfe);\n  }\n\n  static debugLog(preference = null) {\n    if (preference !== null) {\n      PFElement._debugLog = !!preference;\n    }\n    return PFElement._debugLog;\n  }\n\n  static log(...msgs) {\n    if (PFElement.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n\n  static get PfeTypes() {\n    return {\n      Container: \"container\",\n      Content: \"content\",\n      Combo: \"combo\"\n    };\n  }\n\n  static get version() {\n    return \"{{version}}\";\n  }\n\n  static get observedAttributes() {\n    return [\"pfe-theme\"];\n  }\n\n  get randomId() {\n    return Math.random()\n      .toString(36)\n      .substr(2, 9);\n  }\n\n  get version() {\n    return this._pfeClass.version;\n  }\n\n  get pfeType() {\n    return this.getAttribute(`${prefix}type`);\n  }\n\n  set pfeType(value) {\n    this.setAttribute(`${prefix}type`, value);\n  }\n\n  cssVariable(name, value, element = this) {\n    name = name.substr(0, 2) !== \"--\" ? \"--\" + name : name;\n    if (value) {\n      element.style.setProperty(name, value);\n    }\n    return window\n      .getComputedStyle(element)\n      .getPropertyValue(name)\n      .trim();\n  }\n\n  // Returns a single element assigned to that slot; if multiple, it returns the first\n  has_slot(name) {\n    return this.querySelector(`[slot='${name}']`);\n  }\n\n  // Returns an array with all elements assigned to that slot\n  has_slots(name) {\n    return [...this.querySelectorAll(`[slot='${name}']`)];\n  }\n\n  // Update the theme context for self and children\n  context_update() {\n    const children = this.querySelectorAll(\"[pfelement]\");\n    let theme = this.cssVariable(\"theme\");\n\n    // Manually adding `pfe-theme` overrides the css variable\n    if (this.hasAttribute(\"pfe-theme\")) {\n      theme = this.getAttribute(\"pfe-theme\");\n      // Update the css variable to match the data attribute\n      this.cssVariable(\"theme\", theme);\n    }\n\n    // Update theme for self\n    this.context_set(theme);\n\n    // For each nested, already upgraded component\n    // set the context based on the child's value of --theme\n    // Note: this prevents contexts from parents overriding\n    // the child's context should it exist\n    [...children].map(child => {\n      if (child.connected) {\n        child.context_set(theme);\n      }\n    });\n  }\n\n  // Get the theme variable if it exists, set it as an attribute\n  context_set(fallback) {\n    let theme = this.cssVariable(\"theme\");\n    if (!theme) {\n      theme = this.getAttribute(\"pfe-theme\");\n    }\n    if (!theme && fallback) {\n      theme = fallback;\n    }\n    if (theme) {\n      this.setAttribute(\"on\", theme);\n    }\n  }\n\n  constructor(pfeClass, { type = null, delayRender = false } = {}) {\n    super();\n\n    this.connected = false;\n    this._pfeClass = pfeClass;\n    this.tag = pfeClass.tag;\n    this.props = pfeClass.properties;\n    this.slots = pfeClass.slots;\n    this._queue = [];\n    this.template = document.createElement(\"template\");\n\n    this.log(`Constructing...`);\n\n    this.attachShadow({ mode: \"open\" });\n\n    if (type) {\n      this._queueAction({\n        type: \"setProperty\",\n        data: {\n          name: \"pfeType\",\n          value: type\n        }\n      });\n    }\n\n    if (!delayRender) {\n      this.log(`Render...`);\n      this.render();\n      this.log(`Rendered.`);\n    }\n\n    this.log(`Constructed.`);\n  }\n\n  connectedCallback() {\n    this.connected = true;\n    this.log(`Connecting...`);\n\n    if (window.ShadyCSS) {\n      this.log(`Styling...`);\n      window.ShadyCSS.styleElement(this);\n      this.log(`Styled.`);\n    }\n\n    // Throw a warning if the on attribute was manually added before upgrade\n    if (!this.hasAttribute(\"pfelement\") && this.hasAttribute(\"on\")) {\n      console.warn(\n        `${this.tag}${\n          this.id ? `[#${this.id}]` : ``\n        }: The \"on\" attribute is protected and should not be manually added to a component. The base class will manage this value for you on upgrade.`\n      );\n    }\n\n    // @TODO maybe we should use just the attribute instead of the class?\n    // https://github.com/angular/angular/issues/15399#issuecomment-318785677\n    this.classList.add(\"PFElement\");\n    this.setAttribute(\"pfelement\", \"\");\n\n    if (typeof this.props === \"object\") {\n      this._mapSchemaToProperties(this.tag, this.props);\n      this.log(`Properties attached.`);\n    }\n\n    if (typeof this.slots === \"object\") {\n      this._mapSchemaToSlots(this.tag, this.slots);\n      this.log(`Slots attached.`);\n    }\n\n    if (this._queue.length) {\n      this._processQueue();\n    }\n\n    // Initialize the on attribute if a theme variable is set\n    // do not update the on attribute if a user has manually added it\n    // then trigger an update in nested components\n    this.context_update();\n\n    this.log(`Connected.`);\n  }\n\n  disconnectedCallback() {\n    this.log(`Disconnecting...`);\n\n    this.connected = false;\n\n    this.log(`Disconnected.`);\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    if (!this._pfeClass.cascadingAttributes) {\n      return;\n    }\n\n    const cascadeTo = this._pfeClass.cascadingAttributes[attr];\n    if (cascadeTo) {\n      this._copyAttribute(attr, cascadeTo);\n    }\n\n    if (attr === \"pfe-theme\") {\n      this.context_update();\n    }\n  }\n\n  _copyAttribute(name, to) {\n    const recipients = [\n      ...this.querySelectorAll(to),\n      ...this.shadowRoot.querySelectorAll(to)\n    ];\n    const value = this.getAttribute(name);\n    const fname = value == null ? \"removeAttribute\" : \"setAttribute\";\n    for (const node of recipients) {\n      node[fname](name, value);\n    }\n  }\n\n  // Map the imported properties json to real props on the element\n  // @notice static getter of properties is built via tooling\n  // to edit modify src/element.json\n  _mapSchemaToProperties(tag, properties) {\n    this.log(\"Mapping properties...\");\n    // Loop over the properties provided by the schema\n    Object.keys(properties).forEach(attr => {\n      let data = properties[attr];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof data === \"object\") {\n        // Prefix default is true\n        let hasPrefix = true;\n        let attrName = attr;\n        // Set the attribute's property equal to the schema input\n        this[attr] = data;\n        // Initialize the value to null\n        this[attr].value = null;\n\n        if (typeof this[attr].prefixed !== \"undefined\") {\n          hasPrefix = this[attr].prefixed;\n        }\n\n        if (hasPrefix) {\n          attrName = `${prefix}${attr}`;\n        }\n\n        // If the attribute exists on the host\n        if (this.hasAttribute(attrName)) {\n          // Set property value based on the existing attribute\n          this[attr].value = this.getAttribute(attrName);\n        }\n        // Otherwise, look for a default and use that instead\n        else if (data.default) {\n          const dependency_exists = this._hasDependency(tag, data.options);\n          const no_dependencies =\n            !data.options ||\n            (data.options && !data.options.dependencies.length);\n          // If the dependency exists or there are no dependencies, set the default\n          if (dependency_exists || no_dependencies) {\n            this.setAttribute(attrName, data.default);\n            this[attr].value = data.default;\n          }\n        }\n      }\n    });\n\n    this.log(\"Properties mapped.\");\n  }\n\n  // Test whether expected dependencies exist\n  _hasDependency(tag, opts) {\n    // Get any possible dependencies for this attribute to exist\n    let dependencies = opts ? opts.dependencies : [];\n    // Initialize the dependency return value\n    let hasDependency = false;\n    // Check that dependent item exists\n    // Loop through the dependencies defined\n    for (let i = 0; i < dependencies.length; i += 1) {\n      const slot_exists =\n        dependencies[i].type === \"slot\" &&\n        this.has_slots(`${tag}--${dependencies[i].id}`).length > 0;\n      const attribute_exists =\n        dependencies[i].type === \"attribute\" &&\n        this.getAttribute(`${prefix}${dependencies[i].id}`);\n      // If the type is slot, check that it exists OR\n      // if the type is an attribute, check if the attribute is defined\n      if (slot_exists || attribute_exists) {\n        // If the slot does exist, add the attribute with the default value\n        hasDependency = true;\n        // Exit the loop\n        break;\n      }\n    }\n    // Return a boolean if the dependency exists\n    return hasDependency;\n  }\n\n  // Map the imported slots json\n  // @notice static getter of properties is built via tooling\n  // to edit modify src/element.json\n  _mapSchemaToSlots(tag, slots) {\n    this.log(\"Validate slots...\");\n    // Loop over the properties provided by the schema\n    Object.keys(slots).forEach(slot => {\n      let slotObj = slots[slot];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof slotObj === \"object\") {\n        let slotExists = false;\n        let result = [];\n        // If it's a named slot, look for that slot definition\n        if (slotObj.namedSlot) {\n          // Check prefixed slots\n          result = this.has_slots(`${tag}--${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n\n          // Check for unprefixed slots\n          result = this.has_slots(`${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n          // If it's the default slot, look for direct children not assigned to a slot\n        } else {\n          result = [...this.children].filter(\n            child => !child.hasAttribute(\"slot\")\n          );\n\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        }\n\n        // If the slot exists, attach an attribute to the parent to indicate that\n        if (slotExists) {\n          this.setAttribute(`has_${slot}`, \"\");\n        } else {\n          this.removeAttribute(`has_${slot}`);\n        }\n      }\n    });\n    this.log(\"Slots validated.\");\n  }\n\n  _queueAction(action) {\n    this._queue.push(action);\n  }\n\n  _processQueue() {\n    this._queue.forEach(action => {\n      this[`_${action.type}`](action.data);\n    });\n\n    this._queue = [];\n  }\n\n  _setProperty({ name, value }) {\n    this[name] = value;\n  }\n\n  // @TODO This is a duplicate function to cssVariable above, combine them\n  static var(name, element = document.body) {\n    return window\n      .getComputedStyle(element)\n      .getPropertyValue(name)\n      .trim();\n  }\n\n  var(name) {\n    return PFElement.var(name, this);\n  }\n\n  render() {\n    this.shadowRoot.innerHTML = \"\";\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n  }\n\n  log(...msgs) {\n    PFElement.log(`[${this.tag}]`, ...msgs);\n  }\n\n  emitEvent(\n    name,\n    { bubbles = true, cancelable = false, composed = false, detail = {} } = {}\n  ) {\n    this.log(`Custom event: ${name}`);\n    this.dispatchEvent(\n      new CustomEvent(name, {\n        bubbles,\n        cancelable,\n        composed,\n        detail\n      })\n    );\n  }\n}\n\nautoReveal(PFElement.log);\n\nexport default PFElement;\n"],"names":["logger","handleWebComponentsReady","window","document","body","removeAttribute","prefix","PFElement","HTMLElement","[object Object]","pfe","customElements","define","tag","preference","_debugLog","msgs","debugLog","console","log","PfeTypes","Container","Content","Combo","version","observedAttributes","randomId","Math","random","toString","substr","this","_pfeClass","pfeType","getAttribute","value","setAttribute","name","element","style","setProperty","getComputedStyle","getPropertyValue","trim","querySelector","querySelectorAll","children","theme","cssVariable","hasAttribute","context_set","map","child","connected","fallback","pfeClass","type","delayRender","super","props","properties","slots","_queue","template","createElement","attachShadow","mode","_queueAction","data","render","ShadyCSS","styleElement","warn","id","classList","add","_mapSchemaToProperties","_mapSchemaToSlots","length","_processQueue","context_update","attr","oldVal","newVal","cascadingAttributes","cascadeTo","_copyAttribute","to","recipients","shadowRoot","fname","node","Object","keys","forEach","hasPrefix","attrName","prefixed","default","dependency_exists","_hasDependency","options","no_dependencies","dependencies","opts","hasDependency","i","slot_exists","has_slots","attribute_exists","slot","slotObj","slotExists","result","namedSlot","nodes","filter","action","push","var","innerHTML","html","prepareTemplate","appendChild","content","cloneNode","bubbles","cancelable","composed","detail","dispatchEvent","CustomEvent","logFunction","polyfillPresent","WebComponents","polyfillReady","ready","addEventListener","autoReveal"],"mappings":"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"}
{"version":3,"file":"pfelement.umd.min.js","sources":["../_temp/reveal.js","../_temp/pfelement.umd.js"],"sourcesContent":["let logger = () => null;\n\nexport function reveal() {\n  logger(`[reveal] elements ready, revealing the body`);\n  window.document.body.removeAttribute(\"unresolved\");\n}\n\nexport function autoReveal(logFunction) {\n  logger = logFunction;\n  // If Web Components are already ready, run the handler right away.  If they\n  // are not yet ready, wait.\n  //\n  // see https://github.com/github/webcomponentsjs#webcomponents-loaderjs for\n  // info about web component readiness events\n  const polyfillPresent = window.WebComponents;\n  const polyfillReady = polyfillPresent && window.WebComponents.ready;\n\n  if (!polyfillPresent || polyfillReady) {\n    handleWebComponentsReady();\n  } else {\n    window.addEventListener(\"WebComponentsReady\", handleWebComponentsReady);\n  }\n}\n\nfunction handleWebComponentsReady() {\n  logger(\"[reveal] web components ready\");\n  reveal();\n}\n","/*!\n * PatternFly Elements: PFElement 1.0.0-prerelease.45\n * @license\n * Copyright 2020 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport { autoReveal } from \"./reveal.js\";\nconst prefix = \"pfe-\";\n\nclass PFElement extends HTMLElement {\n  static create(pfe) {\n    window.customElements.define(pfe.tag, pfe);\n  }\n\n  static debugLog(preference = null) {\n    if (preference !== null) {\n      PFElement._debugLog = !!preference;\n    }\n    return PFElement._debugLog;\n  }\n\n  static log(...msgs) {\n    if (PFElement.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n\n  static get PfeTypes() {\n    return {\n      Container: \"container\",\n      Content: \"content\",\n      Combo: \"combo\"\n    };\n  }\n\n  static get version() {\n    return \"{{version}}\";\n  }\n\n  static get observedAttributes() {\n    return [\"pfe-theme\"];\n  }\n\n  get randomId() {\n    return Math.random()\n      .toString(36)\n      .substr(2, 9);\n  }\n\n  get version() {\n    return this._pfeClass.version;\n  }\n\n  get pfeType() {\n    return this.getAttribute(`${prefix}type`);\n  }\n\n  set pfeType(value) {\n    this.setAttribute(`${prefix}type`, value);\n  }\n\n  cssVariable(name, value, element = this) {\n    name = name.substr(0, 2) !== \"--\" ? \"--\" + name : name;\n    if (value) {\n      element.style.setProperty(name, value);\n    }\n    return window\n      .getComputedStyle(element)\n      .getPropertyValue(name)\n      .trim();\n  }\n\n  // Returns a single element assigned to that slot; if multiple, it returns the first\n  has_slot(name) {\n    return this.querySelector(`[slot='${name}']`);\n  }\n\n  // Returns an array with all elements assigned to that slot\n  has_slots(name) {\n    return [...this.querySelectorAll(`[slot='${name}']`)];\n  }\n\n  // Update the theme context for self and children\n  context_update() {\n    const children = this.querySelectorAll(\"[pfelement]\");\n    let theme = this.cssVariable(\"theme\");\n\n    // Manually adding `pfe-theme` overrides the css variable\n    if (this.hasAttribute(\"pfe-theme\")) {\n      theme = this.getAttribute(\"pfe-theme\");\n      // Update the css variable to match the data attribute\n      this.cssVariable(\"theme\", theme);\n    }\n\n    // Update theme for self\n    this.context_set(theme);\n\n    // For each nested, already upgraded component\n    // set the context based on the child's value of --theme\n    // Note: this prevents contexts from parents overriding\n    // the child's context should it exist\n    [...children].map(child => {\n      if (child.connected) {\n        child.context_set(theme);\n      }\n    });\n  }\n\n  // Get the theme variable if it exists, set it as an attribute\n  context_set(fallback) {\n    let theme = this.cssVariable(\"theme\");\n    if (!theme) {\n      theme = this.getAttribute(\"pfe-theme\");\n    }\n    if (!theme && fallback) {\n      theme = fallback;\n    }\n    if (theme) {\n      this.setAttribute(\"on\", theme);\n    }\n  }\n\n  constructor(pfeClass, { type = null, delayRender = false } = {}) {\n    super();\n\n    this.connected = false;\n    this._pfeClass = pfeClass;\n    this.tag = pfeClass.tag;\n    this.props = pfeClass.properties;\n    this.slots = pfeClass.slots;\n    this._queue = [];\n    this.template = document.createElement(\"template\");\n\n    this.log(`Constructing...`);\n\n    this.attachShadow({ mode: \"open\" });\n\n    if (type) {\n      this._queueAction({\n        type: \"setProperty\",\n        data: {\n          name: \"pfeType\",\n          value: type\n        }\n      });\n    }\n\n    if (!delayRender) {\n      this.log(`Render...`);\n      this.render();\n      this.log(`Rendered.`);\n    }\n\n    this.log(`Constructed.`);\n  }\n\n  connectedCallback() {\n    this.connected = true;\n    this.log(`Connecting...`);\n\n    if (window.ShadyCSS) {\n      this.log(`Styling...`);\n      window.ShadyCSS.styleElement(this);\n      this.log(`Styled.`);\n    }\n\n    // Throw a warning if the on attribute was manually added before upgrade\n    if (!this.hasAttribute(\"pfelement\") && this.hasAttribute(\"on\")) {\n      console.warn(\n        `${this.tag}${\n          this.id ? `[#${this.id}]` : ``\n        }: The \"on\" attribute is protected and should not be manually added to a component. The base class will manage this value for you on upgrade.`\n      );\n    }\n\n    // @TODO maybe we should use just the attribute instead of the class?\n    // https://github.com/angular/angular/issues/15399#issuecomment-318785677\n    this.classList.add(\"PFElement\");\n    this.setAttribute(\"pfelement\", \"\");\n\n    if (typeof this.props === \"object\") {\n      this._mapSchemaToProperties(this.tag, this.props);\n      this.log(`Properties attached.`);\n    }\n\n    if (typeof this.slots === \"object\") {\n      this._mapSchemaToSlots(this.tag, this.slots);\n      this.log(`Slots attached.`);\n    }\n\n    if (this._queue.length) {\n      this._processQueue();\n    }\n\n    // Initialize the on attribute if a theme variable is set\n    // do not update the on attribute if a user has manually added it\n    // then trigger an update in nested components\n    this.context_update();\n\n    this.log(`Connected.`);\n  }\n\n  disconnectedCallback() {\n    this.log(`Disconnecting...`);\n\n    this.connected = false;\n\n    this.log(`Disconnected.`);\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    if (!this._pfeClass.cascadingAttributes) {\n      return;\n    }\n\n    const cascadeTo = this._pfeClass.cascadingAttributes[attr];\n    if (cascadeTo) {\n      this._copyAttribute(attr, cascadeTo);\n    }\n\n    if (attr === \"pfe-theme\") {\n      this.context_update();\n    }\n  }\n\n  _copyAttribute(name, to) {\n    const recipients = [\n      ...this.querySelectorAll(to),\n      ...this.shadowRoot.querySelectorAll(to)\n    ];\n    const value = this.getAttribute(name);\n    const fname = value == null ? \"removeAttribute\" : \"setAttribute\";\n    for (const node of recipients) {\n      node[fname](name, value);\n    }\n  }\n\n  // Map the imported properties json to real props on the element\n  // @notice static getter of properties is built via tooling\n  // to edit modify src/element.json\n  _mapSchemaToProperties(tag, properties) {\n    this.log(\"Mapping properties...\");\n    // Loop over the properties provided by the schema\n    Object.keys(properties).forEach(attr => {\n      let data = properties[attr];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof data === \"object\") {\n        // Prefix default is true\n        let hasPrefix = true;\n        let attrName = attr;\n        // Set the attribute's property equal to the schema input\n        this[attr] = data;\n        // Initialize the value to null\n        this[attr].value = null;\n\n        if (typeof this[attr].prefixed !== \"undefined\") {\n          hasPrefix = this[attr].prefixed;\n        }\n\n        if (hasPrefix) {\n          attrName = `${prefix}${attr}`;\n        }\n\n        // If the attribute exists on the host\n        if (this.hasAttribute(attrName)) {\n          // Set property value based on the existing attribute\n          this[attr].value = this.getAttribute(attrName);\n        }\n        // Otherwise, look for a default and use that instead\n        else if (data.default) {\n          const dependency_exists = this._hasDependency(tag, data.options);\n          const no_dependencies =\n            !data.options ||\n            (data.options && !data.options.dependencies.length);\n          // If the dependency exists or there are no dependencies, set the default\n          if (dependency_exists || no_dependencies) {\n            this.setAttribute(attrName, data.default);\n            this[attr].value = data.default;\n          }\n        }\n      }\n    });\n\n    this.log(\"Properties mapped.\");\n  }\n\n  // Test whether expected dependencies exist\n  _hasDependency(tag, opts) {\n    // Get any possible dependencies for this attribute to exist\n    let dependencies = opts ? opts.dependencies : [];\n    // Initialize the dependency return value\n    let hasDependency = false;\n    // Check that dependent item exists\n    // Loop through the dependencies defined\n    for (let i = 0; i < dependencies.length; i += 1) {\n      const slot_exists =\n        dependencies[i].type === \"slot\" &&\n        this.has_slots(`${tag}--${dependencies[i].id}`).length > 0;\n      const attribute_exists =\n        dependencies[i].type === \"attribute\" &&\n        this.getAttribute(`${prefix}${dependencies[i].id}`);\n      // If the type is slot, check that it exists OR\n      // if the type is an attribute, check if the attribute is defined\n      if (slot_exists || attribute_exists) {\n        // If the slot does exist, add the attribute with the default value\n        hasDependency = true;\n        // Exit the loop\n        break;\n      }\n    }\n    // Return a boolean if the dependency exists\n    return hasDependency;\n  }\n\n  // Map the imported slots json\n  // @notice static getter of properties is built via tooling\n  // to edit modify src/element.json\n  _mapSchemaToSlots(tag, slots) {\n    this.log(\"Validate slots...\");\n    // Loop over the properties provided by the schema\n    Object.keys(slots).forEach(slot => {\n      let slotObj = slots[slot];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof slotObj === \"object\") {\n        let slotExists = false;\n        let result = [];\n        // If it's a named slot, look for that slot definition\n        if (slotObj.namedSlot) {\n          // Check prefixed slots\n          result = this.has_slots(`${tag}--${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n\n          // Check for unprefixed slots\n          result = this.has_slots(`${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n          // If it's the default slot, look for direct children not assigned to a slot\n        } else {\n          result = [...this.children].filter(\n            child => !child.hasAttribute(\"slot\")\n          );\n\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        }\n\n        // If the slot exists, attach an attribute to the parent to indicate that\n        if (slotExists) {\n          this.setAttribute(`has_${slot}`, \"\");\n        } else {\n          this.removeAttribute(`has_${slot}`);\n        }\n      }\n    });\n    this.log(\"Slots validated.\");\n  }\n\n  _queueAction(action) {\n    this._queue.push(action);\n  }\n\n  _processQueue() {\n    this._queue.forEach(action => {\n      this[`_${action.type}`](action.data);\n    });\n\n    this._queue = [];\n  }\n\n  _setProperty({ name, value }) {\n    this[name] = value;\n  }\n\n  // @TODO This is a duplicate function to cssVariable above, combine them\n  static var(name, element = document.body) {\n    return window\n      .getComputedStyle(element)\n      .getPropertyValue(name)\n      .trim();\n  }\n\n  var(name) {\n    return PFElement.var(name, this);\n  }\n\n  render() {\n    this.shadowRoot.innerHTML = \"\";\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n  }\n\n  log(...msgs) {\n    PFElement.log(`[${this.tag}]`, ...msgs);\n  }\n\n  emitEvent(\n    name,\n    { bubbles = true, cancelable = false, composed = false, detail = {} } = {}\n  ) {\n    this.log(`Custom event: ${name}`);\n    this.dispatchEvent(\n      new CustomEvent(name, {\n        bubbles,\n        cancelable,\n        composed,\n        detail\n      })\n    );\n  }\n}\n\nautoReveal(PFElement.log);\n\nexport default PFElement;\n"],"names":["logger","handleWebComponentsReady","document","body","removeAttribute","prefix","PFElement","HTMLElement","name","value","element","this","substr","style","setProperty","window","getComputedStyle","getPropertyValue","trim","querySelector","querySelectorAll","children","theme","cssVariable","hasAttribute","getAttribute","context_set","map","child","connected","fallback","setAttribute","Math","random","toString","_pfeClass","version","pfe","customElements","define","tag","preference","_debugLog","debugLog","log","ShadyCSS","styleElement","warn","id","classList","add","babelHelpers.typeof","props","_mapSchemaToProperties","slots","_mapSchemaToSlots","_queue","length","_processQueue","context_update","attr","oldVal","newVal","cascadingAttributes","cascadeTo","_copyAttribute","to","recipients","shadowRoot","fname","properties","keys","forEach","data","hasPrefix","attrName","_this2","prefixed","default","dependency_exists","_hasDependency","options","no_dependencies","dependencies","opts","hasDependency","i","slot_exists","type","has_slots","attribute_exists","slotObj","slot","slotExists","result","namedSlot","_this3","nodes","filter","action","push","var","innerHTML","template","html","prepareTemplate","appendChild","content","cloneNode","msgs","bubbles","cancelable","composed","detail","dispatchEvent","CustomEvent","pfeClass","delayRender","createElement","attachShadow","mode","_queueAction","render","logFunction","polyfillPresent","WebComponents","polyfillReady","ready","addEventListener","autoReveal"],"mappings":"qLAAA,IAAIA,EAAS,kBAAM,MAwBnB,SAASC,MACA,yFArBAC,SAASC,KAAKC,gBAAgB,0jBCsBjCC,EAAS,OAETC,+TAAkBC,oDAoDVC,EAAMC,SAAOC,mCAAUC,cACJ,OAAtBH,EAAKI,OAAO,EAAG,GAAc,KAAOJ,EAAOA,EAC9CC,KACMI,MAAMC,YAAYN,EAAMC,GAE3BM,OACJC,iBAAiBN,GACjBO,iBAAiBT,GACjBU,wCAIIV,UACAG,KAAKQ,wBAAwBX,0CAI5BA,qBACGG,KAAKS,2BAA2BZ,uDAKrCa,EAAWV,KAAKS,iBAAiB,eACnCE,EAAQX,KAAKY,YAAY,SAGzBZ,KAAKa,aAAa,iBACZb,KAAKc,aAAa,kBAErBF,YAAY,QAASD,SAIvBI,YAAYJ,eAMbD,IAAUM,IAAI,YACZC,EAAMC,aACFH,YAAYJ,yCAMZQ,OACNR,EAAQX,KAAKY,YAAY,aACxBD,GACKX,KAAKc,aAAa,eAEdK,MACJA,GAENR,QACGS,aAAa,KAAMT,2CA1EnBU,KAAKC,SACTC,SAAS,IACTtB,OAAO,EAAG,0CAIND,KAAKwB,UAAUC,+CAIfzB,KAAKc,aAAgBpB,wBAGlBI,QACLsB,aAAgB1B,SAAcI,oCAhDvB4B,UACLC,eAAeC,OAAOF,EAAIG,IAAKH,2CAGxBI,mCAAa,YACR,OAAfA,MACQC,YAAcD,GAEnBnC,EAAUoC,8CAIbpC,EAAUqC,wBACJC,8DAKH,WACM,oBACF,gBACF,+CAKF,+DAIA,CAAC,qEAqHHf,WAAY,OACZe,qBAED7B,OAAO8B,gBACJD,yBACEC,SAASC,aAAanC,WACxBiC,iBAIFjC,KAAKa,aAAa,cAAgBb,KAAKa,aAAa,eAC/CuB,KACHpC,KAAK6B,KACN7B,KAAKqC,QAAUrC,KAAKqC,gKAOrBC,UAAUC,IAAI,kBACdnB,aAAa,YAAa,IAEL,WAAtBoB,EAAOxC,KAAKyC,cACTC,uBAAuB1C,KAAK6B,IAAK7B,KAAKyC,YACtCR,6BAGmB,WAAtBO,EAAOxC,KAAK2C,cACTC,kBAAkB5C,KAAK6B,IAAK7B,KAAK2C,YACjCV,wBAGHjC,KAAK6C,OAAOC,aACTC,qBAMFC,sBAEAf,sEAIAA,6BAEAf,WAAY,OAEZe,sEAGkBgB,EAAMC,EAAQC,MAChCnD,KAAKwB,UAAU4B,yBAIdC,EAAYrD,KAAKwB,UAAU4B,oBAAoBH,GACjDI,QACGC,eAAeL,EAAMI,GAGf,cAATJ,QACGD,yDAIMnD,EAAM0D,OACbC,cACDxD,KAAKS,iBAAiB8C,MACtBvD,KAAKyD,WAAWhD,iBAAiB8C,KAEhCzD,EAAQE,KAAKc,aAAajB,GAC1B6D,EAAiB,MAAT5D,EAAgB,kBAAoB,kDAC/B0D,yDACZE,GAAO7D,EAAMC,gIAOC+B,EAAK8B,mBACrB1B,IAAI,gCAEF2B,KAAKD,GAAYE,QAAQ,gBAC1BC,EAAOH,EAAWV,MAGF,qBAATa,gBAAAA,IAAmB,KAExBC,GAAY,EACZC,EAAWf,OAEVA,GAAQa,IAERb,GAAMnD,MAAQ,UAEgB,IAAxBmE,EAAKhB,GAAMiB,aACRD,EAAKhB,GAAMiB,UAGrBH,MACYrE,EAASuD,GAIrBgB,EAAKpD,aAAamD,KAEff,GAAMnD,MAAQmE,EAAKnD,aAAakD,QAGlC,GAAIF,EAAKK,QAAS,KACfC,EAAoBH,EAAKI,eAAexC,EAAKiC,EAAKQ,SAClDC,GACHT,EAAKQ,SACLR,EAAKQ,UAAYR,EAAKQ,QAAQE,aAAa1B,QAE1CsB,GAAqBG,OAClBnD,aAAa4C,EAAUF,EAAKK,WAC5BlB,GAAMnD,MAAQgE,EAAKK,kBAM3BlC,IAAI,6DAIIJ,EAAK4C,WAEdD,EAAeC,EAAOA,EAAKD,aAAe,GAE1CE,GAAgB,EAGXC,EAAI,EAAGA,EAAIH,EAAa1B,OAAQ6B,GAAK,EAAG,KACzCC,EACqB,SAAzBJ,EAAaG,GAAGE,MACyC,EAAzD7E,KAAK8E,UAAajD,OAAQ2C,EAAaG,GAAGtC,IAAMS,OAC5CiC,EACqB,cAAzBP,EAAaG,GAAGE,MAChB7E,KAAKc,aAAgBpB,EAAS8E,EAAaG,GAAGtC,OAG5CuC,GAAeG,EAAkB,IAEnB,gBAMbL,4CAMS7C,EAAKc,mBAChBV,IAAI,4BAEF2B,KAAKjB,GAAOkB,QAAQ,gBACrBmB,EAAUrC,EAAMsC,MAGG,qBAAZD,gBAAAA,IAAsB,KAC3BE,GAAa,EACbC,EAAS,GAETH,EAAQI,WAGU,KADXC,EAAKP,UAAajD,OAAQoD,IACxBnC,WACDwC,MAAQH,KACH,GAKK,KADXE,EAAKP,aAAaG,IAChBnC,WACDwC,MAAQH,KACH,IAQK,KAJX,YAAIE,EAAK3E,WAAU6E,OAC1B,mBAAUtE,EAAMJ,aAAa,WAGpBiC,WACDwC,MAAQH,KACH,GAKbD,IACG9D,oBAAoB6D,EAAQ,MAE5BxF,uBAAuBwF,WAI7BhD,IAAI,yDAGEuD,QACN3C,OAAO4C,KAAKD,2DAIZ3C,OAAOgB,QAAQ,kBACT2B,EAAOX,MAAQW,EAAO1B,aAG5BjB,OAAS,+CAGDhD,IAAAA,KAAMC,IAAAA,WACdD,GAAQC,8BAWXD,UACKF,EAAU+F,IAAI7F,EAAMG,4CAItByD,WAAWkC,UAAY,QACvBC,SAASD,UAAY3F,KAAK6F,KAE3BzF,OAAO8B,iBACFA,SAAS4D,gBAAgB9F,KAAK4F,SAAU5F,KAAK6B,UAGjD4B,WAAWsC,YAAY/F,KAAK4F,SAASI,QAAQC,WAAU,6DAGvDC,2CACKjE,iBAAQjC,KAAK6B,gBAAWqE,sCAIlCrG,4CACwE,OAAtEsG,QAAAA,oBAAgBC,WAAAA,oBAAoBC,SAAAA,oBAAkBC,OAAAA,aAAS,UAE5DrE,qBAAqBpC,QACrB0G,cACH,IAAIC,YAAY3G,EAAM,6EAhCfA,SAAME,mCAAUR,SAASC,YAC3BY,OACJC,iBAAiBN,GACjBO,iBAAiBT,GACjBU,yBAzQOkG,gEAAiD,OAArC5B,KAAAA,aAAO,WAAM6B,YAAAA,gWAG9BxF,WAAY,IACZM,UAAYiF,IACZ5E,IAAM4E,EAAS5E,MACfY,MAAQgE,EAAS9C,aACjBhB,MAAQ8D,EAAS9D,QACjBE,OAAS,KACT+C,SAAWrG,SAASoH,cAAc,cAElC1E,yBAEA2E,aAAa,CAAEC,KAAM,SAEtBhC,KACGiC,aAAa,MACV,mBACA,MACE,gBACCjC,KAKR6B,MACEzE,mBACA8E,WACA9E,oBAGFA,6BDrKF,SAAoB+E,KAChBA,MAMHC,EAAkB7G,OAAO8G,cACzBC,EAAgBF,GAAmB7G,OAAO8G,cAAcE,OAEzDH,GAAmBE,aAGfE,iBAAiB,qBAAsB/H,GCwalDgI,CAAW3H,EAAUsC"}
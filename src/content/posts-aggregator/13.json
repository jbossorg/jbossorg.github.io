{
  "title": "Narayana Community Priorities",
  "link": "https://jbossts.blogspot.com/2022/03/narayana-community-priorities.html",
  "author": [
    {
      "name": "Michael Musgrove",
      "avatar": null
    }
  ],
  "date": "2022-03-04T13:24:00.002Z",
  "feed_title": "Narayana team blog",
  "content": "NARAYANA COMMUNITY PRIORITIES  The following is an outline of our near term priorities for the Narayana open source transaction manager. They have been set based on input from the community, including the narayana-users .  It is not necessarily a complete list, so please continue to share your own thoughts on whether you agree they are the right focus for the project, in some respects the list is quite ambitious and we encourage/need and welcome continued contributions and discussion from the community to help achieve these goals.   COMMUNITY ENGAGEMENT   1. Improve inclusiveness by building a community of users:     * produce clear guidance on how to contribute with different levels of       guidance     * responsive to the community (PRs, queries, issues, rooms etc)     * issue labels for new contributors and for tasks that we need help with     * make sure all new features are publicised (blog, articles, docs, etc)     * regular blog posts with runnable and focused examples     * acknowledge contributors in release announcements     * encourage discussions in the community (i.e. minimise private team       discussions)   JAVA VERSIONS   1. : this work is already well under way. Java SE 11 is now the minimum runtime     supported by WildFly and Jakarta EE compatible implementations.  2. (i.e. SE 11 will the minimum supported version) and add   INTEGRATING CONTEMPORARY SERVICES:   1.   2. . This task depends on   CLOUD STRATEGY:   1.   2. An improved cloud strategy for JTA around recovery (again we have already     started work in this area). Currently we need to create a bespoke solution     for every cloud, e.g. the . This task includes provision of a more “cloud     ready” transaction log store. The task still needs to be pinned down but     some relevant input material includes:     1. (this includes an investigation of whether an Infinispan based store is        feasible - note that earlier versions were incompatible with our needs)     2.      3.      4.      5.           There is also the forum item: which will help with using Narayana in cloud     deployments:          * the task should also explore the pros and cons of storing it for crash       recovery purposes     * the forum thread also includes some work that we may do on validating our       current uid solution for cloud environments  3. Better integration of LRA in cloud environments:     1.      2.    TRANSACTION LOG STORES   1. Persistent Memory: narayana already provides a pmem based object store which     we would like to  2.   3. to our own Object Store locking (FileLock.java) for managing concurrent     access to a transaction log. It should be configurable at runtime or build     time (Quarkus is a good use case). If the runtime platform does not provide     the capability then a default fallback mechanism will be defined.   UPGRADES/DEPRECATION/REMOVAL/REPLACEMENT OF EXISTING FUNCTIONALITY:   1. Remove in favour of using . We are tracking this work using .  2. Remove - it was previously deprecated by the . The issue tracker is  3.   4. Upgrade to JUnit 5 (from 4) for unit testing:   OTHER   1. Improved support for asynchronous APIs. Although we continue to be tied to     XA and very few resource managers support the asynchronous component of the     , there are still things we would like to do in this area including"
}
{
  "title": "Hibernate ORM 7 on Quarkus: each new version brings a better database experience",
  "link": "https://quarkus.io/blog/hibernate7-on-quarkus/",
  "author": [
    {
      "name": "Luca Molteni",
      "avatar": null
    }
  ],
  "date": "2025-06-25T00:00:00.000Z",
  "feed_title": "Quarkus",
  "content": "INTRODUCTION  Hibernate ORM is improving at a very fast speed, and so is its integration with Quarkus, as great database access is a key part of the Quarkus experience. The latest Quarkus 3.24 release upgrades Hibernate to version 7, a major upgrade that implies some breaking changes, and thus will require paying attention to the when upgrading. Developers working on Hibernate and Quarkus are constantly collaborating, so here’s a quick peek at what happened over the past few months and at what Quarkus users might expect in the future.   LICENSE AND GOVERNANCE UPDATES  Both Quarkus and Hibernate are now projects of the , a non-profit organization dedicated to creating a collaborative environment for open-source libraries. Since the upgrade to Hibernate 7, Quarkus and all Hibernate libraries now share the same open-source license: the .   HIBERNATE ORM 7.0 UPDATES  The new version of Hibernate brings better performance and , some of which improve the developer experience, such as to efficiently fetch entities in batches.  SUPPORT FOR JAKARTA DATA  is a simpler way to write data-accessing applications, and it’s been supported in Quarkus since . We suggest giving it a try, as it enables a very quick and easy implementation of the DAO/repository patterns, without any boilerplate code and in a type-safe manner. To get started, simply include the jakarta.data:jakarta.data-api dependency with the latest version of Quarkus, i.e.:  <dependency>        <groupId>jakarta.data</groupId>        <artifactId>jakarta.data-api</artifactId>  </dependency>  Here’s an example of how a simple repository can be written:  @Repository public interface Library {      @Find     Optional<Book> byIsbn(String isbn);      @Query(\"\"\"             select b.isbn, b.title, listagg(a.name, ' & ')             from Book b join b.authors a             group by b             order by b.isbn             \"\"\")     List<Summary> summarize(); }  This topic deserves a deeper dive, so let us know if you’re interested, as we could provide more content.  In the meantime, you can always refer to the to get started quickly, and to the for more advanced usage.  NEW RESTRICTIONS API  After the deprecation of the old Hibernate Criteria API, developers were still missing its simplicity, so the Hibernate team introduced a new that even has new features, such as the possibility to further restrict an already-written JPQL/HQL query.  List<Book> books =     SelectionSpecification.create(Book.class,         \"\"\"             from Book where discontinued = false         \"\"\")         .restrict(Restriction.startsWith(Book_.title, \"hibernate\"))         .sort(Order.desc(Book_.title))         .createQuery(session)         .setPage(Page.first(50))         .getResultList();  This feature can also be used with (the Hibernate implementation of the Jakarta Data API), and create a repository that allows filtering without having to write any JPQL/HQL code:  @Find List<Book> books(Restriction<Book> restriction,                  Order<Book> order);  When user will call the method, they can pass the Restriction objects to filter the wanted book.  var books =        library.books(Restriction.contains(Book_.title, \"Hibernate\"),                      Order.of(_Book.title.ascIgnoreCase(),                               _Book.isbn.asc()));   HIBERNATE REACTIVE TOGETHER WITH HIBERNATE ORM  A long-awaited feature is the ability to in the same Quarkus application. Without this feature, making the two extensions coexist required workarounds that are now unnecessary: since Quarkus 3.24, it’s now possible to mix the two.  Hibernate Reactive is a powerful reactive data access abstraction, but its advantages vary per project. Instead of dictating usage, we now enable users to experiment easily with both Hibernate ORM and Reactive. Projects using Hibernate ORM can add the Reactive extension, create reactive resources reusing mapped entities, run tests and benchmarks, and determine if it suits their specific needs and scalability goals. While using both, it’s easier to choose the most suitable approach for different use cases. Another benefit is that it makes it easier to migrate in small steps from one to the other as necessary.  Panache users will also have this possibility starting from   INJECTION OF THE SCHEMAMANAGER  The Hibernate Schema Manager is a powerful tool to generate DDL scripts out of Java objects. Its power is now available to be used in Quarkus via dependency injection. This is particularly useful when letting you programmatically control when to do schema export, schema validation, data cleanup, and schema cleanup.   THE FUTURE  The teams have many plans for the future of these important projects: the DevUI of Quarkus will be enhanced with improvements to the developer experience, with the possibility of to try out the syntax and experiment with test data and .    We’re working on improving the Hibernate Reactive extension as well, by providing support for .  Also, as part of giving a better experience for the user, the Quarkus and Hibernate teams constantly collaborate on performance and efficiency improvements. For example, an optimization that improved the performance by , end even more when dealing with persistent collections. And that’s just one improvement among many, and not the last one: even bigger performance improvements are expected in the future.  and let us know what you think!"
}